# Fern Platform - Kubernetes Makefile
# Handles k3d cluster and Kubernetes deployments

.PHONY: k3d-create k3d-delete k3d-status k8s-deploy k8s-delete k8s-status deploy-all deploy-quick

# K3D cluster management
k3d-create: ## Create k3d cluster for fern-platform
	@echo "üéØ Creating k3d cluster..."
	k3d cluster create fern-platform --port "8080:80@loadbalancer" --agents 2
	@echo "‚úÖ k3d cluster 'fern-platform' created"

k3d-delete: ## Delete k3d cluster
	@echo "üßπ Deleting k3d cluster..."
	k3d cluster delete fern-platform
	@echo "‚úÖ k3d cluster deleted"

k3d-status: ## Check k3d cluster status
	@echo "üìä Checking k3d cluster status..."
	kubectl cluster-info
	kubectl get nodes

# Kubernetes operations
k8s-deploy: ## Deploy to Kubernetes using KubeVela
	@echo "‚ò∏Ô∏è Deploying to Kubernetes..."
	@echo "üìÅ Creating namespace if it doesn't exist..."
	@kubectl create namespace fern-platform 2>/dev/null || true
	@kubectl apply -f deployments/fern-platform-kubevela.yaml
	@echo "‚úÖ Deployed to Kubernetes"

k8s-delete: ## Delete from Kubernetes
	@echo "‚ò∏Ô∏è Deleting from Kubernetes..."
	vela delete fern-platform -n fern-platform
	@echo "‚úÖ Deleted from Kubernetes"

k8s-status: ## Check Kubernetes deployment status
	@echo "‚ò∏Ô∏è Checking deployment status..."
	@echo ""
	@echo "üìä KubeVela Application Status:"
	@vela status fern-platform -n fern-platform 2>/dev/null || echo "‚ö†Ô∏è  No KubeVela application found"
	@echo ""
	@echo "üîç Pods in fern-platform namespace:"
	@kubectl get pods -n fern-platform
	@echo ""
	@echo "üåê Services:"
	@kubectl get svc -n fern-platform
	@echo ""
	@echo "üîÄ Ingress:"
	@kubectl get ingress -n fern-platform
	@echo ""
	@echo "üåê Application is accessible at:"
	@echo "   http://fern-platform.local:8080 (via Traefik ingress)"

# Deployment automation
deploy-all: ## Complete automated deployment (k3d + prerequisites + build + deploy)
	@echo "üöÄ Starting complete automated deployment of Fern Platform..."
	@echo ""
	@echo "This will:"
	@echo "1. Check/create k3d cluster"
	@echo "2. Install prerequisites (KubeVela, CNPG)"
	@echo "3. Build Docker image via Dagger"
	@echo "4. Deploy application with KubeVela"
	@echo ""
	@$(MAKE) -f Makefile.k8s check-or-create-cluster
	@$(MAKE) -f Makefile.k8s check-and-install-prerequisites
	@$(MAKE) -f Makefile.k8s build-and-load-image
	@$(MAKE) -f Makefile.k8s mock-jira-deploy
	@$(MAKE) -f Makefile.k8s deploy-and-verify
	@echo ""
	@echo "üéâ Fern Platform deployment completed successfully!"
	@echo ""
	@echo "‚ö†Ô∏è  IMPORTANT: Add these entries to your /etc/hosts file:"
	@echo "   127.0.0.1 fern-platform.local"
	@echo "   127.0.0.1 keycloak"
	@echo ""
	@echo "üåê Application is now accessible at: http://fern-platform.local:8080"

deploy-quick: ## Quick deployment (assumes cluster and prerequisites exist)
	@echo "üöÄ Quick deployment (assumes cluster exists)..."
	@$(MAKE) -f Makefile.k8s build-and-load-image
	@$(MAKE) -f Makefile.k8s deploy-and-verify
	@echo "üéâ Quick deployment completed!"

# Internal helpers for deploy-all
check-or-create-cluster: ## Check if k3d cluster exists, create if not
	@echo "üîç Checking k3d cluster status..."
	@$(MAKE) -f Makefile.k8s check-hosts-file
	@if k3d cluster list | grep -q "fern-platform.*running"; then \
		echo "‚úÖ k3d cluster 'fern-platform' already exists and is running"; \
		kubectl cluster-info --context k3d-fern-platform > /dev/null 2>&1 || (echo "‚ùå Cluster not accessible, recreating..." && k3d cluster delete fern-platform && k3d cluster create fern-platform --port "8080:80@loadbalancer" --agents 2); \
	else \
		echo "üì¶ Creating new k3d cluster 'fern-platform'..."; \
		k3d cluster create fern-platform --port "8080:80@loadbalancer" --agents 2; \
		echo "‚úÖ k3d cluster created successfully"; \
	fi
	@kubectl config use-context k3d-fern-platform
	@sleep 10

check-hosts-file: ## Check and setup /etc/hosts entries
	@echo "üîç Checking /etc/hosts configuration..."
	@if ! grep -q "fern-platform.local" /etc/hosts; then \
		echo "‚ö†Ô∏è  Missing fern-platform.local in /etc/hosts"; \
		echo ""; \
		echo "Please add these entries to your /etc/hosts file:"; \
		echo ""; \
		echo "   sudo sh -c 'echo \"127.0.0.1 fern-platform.local\" >> /etc/hosts'"; \
		echo "   sudo sh -c 'echo \"127.0.0.1 keycloak\" >> /etc/hosts'"; \
		echo ""; \
		read -p "Press Enter after adding the entries to continue..."; \
	else \
		echo "‚úÖ /etc/hosts entries found"; \
	fi

check-and-install-prerequisites: ## Check and install KubeVela and CNPG if not present
	@echo "üîç Checking and installing prerequisites..."
	@$(MAKE) -f Makefile.k8s check-install-kubevela
	@$(MAKE) -f Makefile.k8s check-install-cnpg
	@echo "‚úÖ All prerequisites ready"

check-install-kubevela: ## Check if KubeVela is installed, install if not
	@echo "üì¶ Checking KubeVela installation..."
	@if kubectl get deployment kubevela-vela-core -n vela-system > /dev/null 2>&1; then \
		echo "‚úÖ KubeVela already installed"; \
	else \
		echo "üîß Installing KubeVela..."; \
		if ! command -v vela &> /dev/null; then \
			echo "üì• Installing KubeVela CLI..."; \
			curl -fsSl https://kubevela.io/script/install.sh | bash; \
		fi; \
		echo "üì¶ Installing KubeVela operator..."; \
		helm repo add kubevela https://kubevela.github.io/charts > /dev/null 2>&1 || true; \
		helm repo update > /dev/null 2>&1; \
		helm install --create-namespace -n vela-system kubevela kubevela/vela-core --wait --timeout=10m; \
		echo "‚úÖ KubeVela installed successfully"; \
	fi

check-install-cnpg: ## Check if CloudNativePG is installed, install if not
	@echo "üì¶ Checking CloudNativePG installation..."
	@if kubectl get deployment cnpg-controller-manager -n cnpg-system > /dev/null 2>&1; then \
		echo "‚úÖ CloudNativePG already installed"; \
	else \
		echo "üîß Installing CloudNativePG..."; \
		helm repo add cnpg https://cloudnative-pg.github.io/charts > /dev/null 2>&1 || true; \
		helm repo update > /dev/null 2>&1; \
		helm upgrade --install cnpg --namespace cnpg-system --create-namespace cnpg/cloudnative-pg --wait --timeout=10m; \
		echo "‚úÖ CloudNativePG installed successfully"; \
	fi

mock-jira-deploy: ## Build and deploy mock-jira service
	@echo "üé≠ Building and deploying mock-jira service..."
	@echo "üì¶ Building mock-jira Docker image..."
	@cd mock-jira && docker build -t mock-jira:latest .
	@echo "üì• Importing mock-jira image into k3d cluster..."
	@k3d image import mock-jira:latest -c fern-platform
	@echo "‚ò∏Ô∏è Deploying mock-jira to Kubernetes..."
	@kubectl apply -f deployments/mock-jira-deployment.yaml
	@echo "‚úÖ Mock-jira deployed successfully"

build-and-load-image: ## Build Docker image directly and load into k3d cluster
	@echo "üê≥ Building and loading Docker image..."
	@echo "üì¶ Building multi-stage Docker image..."
	@# Create a temporary Dockerfile that mirrors what Dagger does
	@echo '# Builder stage' > Dockerfile.fern-platform
	@echo 'FROM golang:1.24.5-alpine AS builder' >> Dockerfile.fern-platform
	@echo 'WORKDIR /src' >> Dockerfile.fern-platform
	@echo 'RUN apk add --no-cache git make' >> Dockerfile.fern-platform
	@echo 'COPY go.mod go.sum ./' >> Dockerfile.fern-platform
	@echo 'RUN go mod download' >> Dockerfile.fern-platform
	@echo 'COPY . .' >> Dockerfile.fern-platform
	@echo 'RUN go build -ldflags "-w -s" -o fern-platform cmd/fern-platform/main.go' >> Dockerfile.fern-platform
	@echo '' >> Dockerfile.fern-platform
	@echo '# Final stage' >> Dockerfile.fern-platform
	@echo 'FROM alpine:3.21' >> Dockerfile.fern-platform
	@echo 'RUN apk add --no-cache ca-certificates tzdata' >> Dockerfile.fern-platform
	@echo 'RUN addgroup -g 1001 -S fern && adduser -u 1001 -S fern -G fern' >> Dockerfile.fern-platform
	@echo 'WORKDIR /app' >> Dockerfile.fern-platform
	@echo 'COPY --from=builder /src/fern-platform ./fern-platform' >> Dockerfile.fern-platform
	@echo 'COPY config ./config' >> Dockerfile.fern-platform
	@echo 'COPY migrations ./migrations' >> Dockerfile.fern-platform
	@echo 'COPY web ./web' >> Dockerfile.fern-platform
	@echo 'RUN chown -R fern:fern /app' >> Dockerfile.fern-platform
	@echo 'USER fern' >> Dockerfile.fern-platform
	@echo 'EXPOSE 8080' >> Dockerfile.fern-platform
	@echo 'HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \' >> Dockerfile.fern-platform
	@echo '  CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1' >> Dockerfile.fern-platform
	@echo 'ENTRYPOINT ["/app/fern-platform"]' >> Dockerfile.fern-platform
	@echo 'CMD ["-config", "config/config.yaml"]' >> Dockerfile.fern-platform
	@# Build the image with a timestamp tag to avoid caching issues
	@docker build -f Dockerfile.fern-platform -t fern-platform:latest -t fern-platform:$(shell date +%s) --no-cache .
	@# Import into k3d
	@echo "üì• Importing image into k3d cluster..."
	@k3d image import fern-platform:latest -c fern-platform
	@# Clean up
	@rm -f Dockerfile.fern-platform
	@echo "‚úÖ Image built and loaded successfully"

deploy-and-verify: ## Deploy application and verify it's running
	@echo "‚ò∏Ô∏è Deploying Fern Platform application..."
	@echo "üìÅ Creating namespace..."
	@kubectl create namespace fern-platform > /dev/null 2>&1 || echo "‚úÖ Namespace already exists"
	@echo "üîß Applying CNPG component definition..."
	@vela def apply deployments/components/cnpg.cue
	@echo "üöÄ Applying KubeVela application..."
	@kubectl apply -f deployments/fern-platform-kubevela.yaml
	@echo "‚è≥ Waiting for initial deployment (60s)..."
	@sleep 60
	@echo "‚ñ∂Ô∏è Resuming workflow..."
	@vela workflow resume fern-platform -n fern-platform > /dev/null 2>&1 || echo "‚ö†Ô∏è Workflow may already be running"
	@echo "‚è≥ Waiting for deployment to be ready..."
	@timeout=300; \
	while [ $$timeout -gt 0 ]; do \
		if kubectl get pods -n fern-platform | grep fern-platform | grep -q "Running"; then \
			echo "‚úÖ Application is running!"; \
			break; \
		fi; \
		echo "‚è≥ Still waiting for pods to be ready... ($$timeout seconds remaining)"; \
		sleep 10; \
		timeout=$$((timeout-10)); \
	done
	@echo "üìä Final status check..."
	@kubectl get pods -n fern-platform
	@echo ""
	@echo "üåê Application is accessible at: http://fern-platform.local:8080"