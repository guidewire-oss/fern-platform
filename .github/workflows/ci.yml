name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

# NOTE: If your enterprise restricts GITHUB_TOKEN permissions,
# create a Personal Access Token (PAT) with 'repo' and 'write:packages' scopes
# and add it as a secret named 'GH_PAT'

env:
  GO_VERSION: '1.24'
  DAGGER_VERSION: '0.18.14'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4.2.2
    
    - name: Set up Go
      uses: actions/setup-go@v5.2.0
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Download dependencies
      run: go mod download
    
    - uses: dagger/dagger-for-github@v6.14.0
      with:
        version: ${{ env.DAGGER_VERSION }}
        verb: call
        module: ./ci
        args: lint --source .

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4.2.2
    
    - name: Set up Go
      uses: actions/setup-go@v5.2.0
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Download dependencies
      run: go mod download
    
    - uses: dagger/dagger-for-github@v6.14.0
      with:
        version: ${{ env.DAGGER_VERSION }}
        verb: call
        module: ./ci
        args: test --source .
    
    - name: Run tests with coverage
      run: |
        go test -race -coverprofile=coverage.txt -covermode=atomic ./...
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4.6.0
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.txt
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    name: Security Scan (Trivy)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4.2.2
    
    - uses: dagger/dagger-for-github@v6.14.0
      with:
        version: ${{ env.DAGGER_VERSION }}
        verb: call
        module: ./ci
        args: security-scan --source .

  vulnerability-check:
    name: Go Vulnerability Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4.2.2
    
    - name: Set up Go
      uses: actions/setup-go@v5.2.0
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest
    
    - name: Run govulncheck
      run: govulncheck ./...

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4.2.2
    - uses: actions/dependency-review-action@v4.6.0
      with:
        fail-on-severity: moderate

  build:
    name: Build Images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: ["linux/amd64", "linux/arm64"]
    steps:
    - uses: actions/checkout@v4.2.2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3.8.0
    
    - name: Cache Docker layers
      uses: actions/cache@v4.2.0
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - uses: dagger/dagger-for-github@v6.14.0
      with:
        version: ${{ env.DAGGER_VERSION }}
        verb: call
        module: ./ci
        args: build --source . --platforms ${{ matrix.platform }}


  all-checks:
    name: All Checks (Main Branch)
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4.2.2
    
    - uses: dagger/dagger-for-github@v6.14.0
      with:
        version: ${{ env.DAGGER_VERSION }}
        verb: call
        module: ./ci
        args: all --source .

  publish:
    name: Publish Multi-Arch Container Images
    runs-on: ubuntu-latest
    needs: [lint, test, security-scan, vulnerability-check, build]
    if: |
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write  # For SLSA attestations
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: ubuntu-latest
    steps:
    - uses: actions/checkout@v4.2.2
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3.2.0
      with:
        platforms: linux/amd64,linux/arm64
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3.8.0
      with:
        driver-opts: network=host
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3.3.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}  # Use PAT if available, fallback to GITHUB_TOKEN
    
    # Uncomment when Docker Hub credentials are available
    # - name: Log in to Docker Hub
    #   uses: docker/login-action@v3.3.0
    #   with:
    #     username: ${{ secrets.DOCKER_USERNAME }}
    #     password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5.6.1
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # Uncomment when Docker Hub credentials are available
          # docker.io/${{ secrets.DOCKER_USERNAME }}/fern-platform
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push by platform
      id: build
      uses: docker/build-push-action@v5.2.0
      with:
        context: .
        platforms: ${{ matrix.platform }}
        push: true
        tags: |
          ${{ steps.meta.outputs.tags }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}-${{ matrix.platform == 'linux/amd64' && 'linux-amd64' || 'linux-arm64' }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=${{ matrix.platform }}
        cache-to: type=gha,mode=max,scope=${{ matrix.platform }}
        provenance: true
        sbom: true
    
    - name: Generate SLSA attestation
      uses: actions/attest-build-provenance@v2.1.0
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ steps.build.outputs.digest }}
        push-to-registry: true
  
  create-manifest:
    name: Create Multi-Arch Manifest
    runs-on: ubuntu-latest
    needs: publish
    if: |
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3.8.0
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3.3.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}  # Use PAT if available, fallback to GITHUB_TOKEN
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5.6.1
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Create and push manifest
      run: |
        # Parse tags from metadata output (one per line)
        echo "${{ steps.meta.outputs.tags }}" | while IFS= read -r tag; do
          [ -z "$tag" ] && continue
          echo "Creating manifest for tag: $tag"
          docker buildx imagetools create \
            --tag "$tag" \
            "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}-linux-amd64" \
            "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}-linux-arm64"
        done